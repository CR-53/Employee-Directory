{"version":3,"sources":["components/Navbar/index.js","components/EmployeeTable/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","EmployeeTable","useState","employees","setEmployees","getEmployeeData","a","employeeData","useEffect","sort","icon","faSort","employeeID","Fragment","firstName","lastName","email","role","columns","dataField","text","filter","numberFilter","textFilter","keyField","data","pagination","paginationFactory","filterFactory","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6LAYeA,MARf,WACE,OACE,yBAAKC,UAAU,gCACd,0BAAMA,UAAU,wBAAhB,wB,oHCqDUC,EAlDO,WAAO,IAAD,EAEQC,mBAAS,IAFjB,mBAEnBC,EAFmB,KAERC,EAFQ,KAIpBC,EAAe,uCAAG,sBAAAC,EAAA,sDAEtBF,EADaG,GADS,2CAAH,qDAKrBC,qBAAU,WACRH,OAIF,IAAMI,EAAO,kBAAC,IAAD,CAAiBC,KAAMC,MAG9BC,EAAa,kBAAC,IAAMC,SAAP,KADC,cACD,IAAkCJ,GAG/CK,EAAY,kBAAC,IAAMD,SAAP,KADC,aACD,IAAiCJ,GAG7CM,EAAW,kBAAC,IAAMF,SAAP,KADC,YACD,IAAgCJ,GAG3CO,EAAQ,kBAAC,IAAMH,SAAP,KADC,QACD,IAA6BJ,GAGrCQ,EAAO,kBAAC,IAAMJ,SAAP,KADC,OACD,IAA4BJ,GAEnCS,EAAU,CACd,CAAEC,UAAW,cAAeC,KAAMR,EAAYH,MAAM,EAAMY,OAAQC,0BAClE,CAAEH,UAAW,aAAcC,KAAMN,EAAWL,MAAM,EAAMY,OAAQE,wBAChE,CAAEJ,UAAW,YAAaC,KAAML,EAAUN,MAAM,EAAMY,OAAQE,wBAC9D,CAAEJ,UAAW,QAASC,KAAMJ,EAAOP,MAAM,EAAMY,OAAQE,wBACvD,CAAEJ,UAAW,OAAQC,KAAMH,EAAMR,MAAM,EAAMY,OAAQE,yBAGvD,OACE,kBAAC,IAAD,CACEC,SAAS,cACTC,KAAMtB,EACNe,QAASA,EACTQ,WAAYC,MACZN,OAAQO,SCpCCC,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCFcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCNNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8525e3a4.chunk.js","sourcesContent":["import React from \"react\";\r\n// import { Link } from \"react-router-dom\";\r\nimport \"./style.css\";\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-light\">\r\n     <span className=\"navbar-brand mb-0 h1\">Employee Directory</span>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import \"./style.css\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport employeeData from \"../../data/employees.json\"\r\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport filterFactory, { textFilter, numberFilter } from 'react-bootstrap-table2-filter';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSort } from '@fortawesome/free-solid-svg-icons'\r\nimport * as ReactBootstrap from \"react-bootstrap\"\r\n\r\nconst EmployeeTable = () => {\r\n\r\n  const [employees, setEmployees] = useState([])\r\n\r\n  const getEmployeeData = async () => {\r\n    const data = employeeData;\r\n    setEmployees(data);\r\n  }\r\n\r\n  useEffect(() => {\r\n    getEmployeeData();\r\n  });\r\n\r\n  /* Table Header Names + Icon */\r\n  const sort = <FontAwesomeIcon icon={faSort} />\r\n  /* Employee ID */\r\n  const employeeIDText = `Employee ID`;\r\n  const employeeID = <React.Fragment>{employeeIDText} {sort}</React.Fragment>\r\n  /* First Name */\r\n  const firstNameText = `First Name`;\r\n  const firstName = <React.Fragment>{firstNameText} {sort}</React.Fragment>\r\n  /* Last Name */\r\n  const lastNameText = `Last Name`;\r\n  const lastName = <React.Fragment>{lastNameText} {sort}</React.Fragment>\r\n  /* Email */\r\n  const emailText = `Email`;\r\n  const email = <React.Fragment>{emailText} {sort}</React.Fragment>\r\n  /* Role */\r\n  const roleText = `Role`;\r\n  const role = <React.Fragment>{roleText} {sort}</React.Fragment>\r\n\r\n  const columns = [\r\n    { dataField: \"employee_id\", text: employeeID, sort: true, filter: numberFilter() },\r\n    { dataField: \"first_name\", text: firstName, sort: true, filter: textFilter() },\r\n    { dataField: \"last_name\", text: lastName, sort: true, filter: textFilter() },\r\n    { dataField: \"email\", text: email, sort: true, filter: textFilter() },\r\n    { dataField: \"role\", text: role, sort: true, filter: textFilter() }\r\n  ]\r\n\r\n  return (\r\n    <BootstrapTable \r\n      keyField=\"employee_id\"\r\n      data={employees}\r\n      columns={columns}\r\n      pagination={paginationFactory()}\r\n      filter={filterFactory()}\r\n    />\r\n  );\r\n}\r\n\r\nexport default EmployeeTable;\r\n","import React, {useState, useEffect} from \"react\";\n// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from \"./components/Navbar\";\nimport EmployeeTable from \"./components/EmployeeTable\";\n\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginatioFactory from \"react-bootstrap-table2-paginator\";\nimport * as ReactBootstrap from \"react-bootstrap\"\n\nfunction App() {\n  return (\n    <div>\n      <Navbar />\n      <EmployeeTable />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport 'react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css';\nimport 'react-bootstrap-table2-filter/dist/react-bootstrap-table2-filter.min.css';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}